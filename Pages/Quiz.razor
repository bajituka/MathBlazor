@page "/quiz"
@inject IJSRuntime js

<h1>Quiz</h1>

<div class="alert alert-success correctResultsHint">
    Правильных ответов: @CorrectAnswers
</div>

@if (WrongAnswers.Any())
{
    <div class="alert alert-danger incorrectResultsHint">

        Неверных ответов: COUNT
        @foreach (var wrongAnswer in WrongAnswers)
        {
            <p>@wrongAnswer</p>
        }

    </div>
}

<div class="row">

    <div class="col-lg-1">
        <label for="difficulty">Сложность</label>
        <select id="difficulty" class="form-control" @bind="SelectedDifficulty">
            <option value="1">Очень легко</option>
            <option value="2">Легко</option>
            <option value="3">Средне</option>
            <option value="4">Сложно</option>
            <option value="5">Очень сложно</option>
        </select>
    </div>

    <div class="col-lg-1">
        <label for="type">Тип</label>
        <select id="type" class="form-control">
            <option value="1" selected>Сложение</option>
            <option value="2">Вычитание</option>
            <option value="3">Умножение</option>
            <option value="4">Деление</option>
        </select>
    </div>

    <div class="col-lg-12"></div>

</div>

<div class="row h-25 align-items-center m-5">

    @if (String.IsNullOrEmpty(CurrentExercise))
    {

        <div class="col-lg-12 text-center">
            <button class="btn btn-primary btn-lg" @onclick="GenerateAdditionExercise">Начать</button>
        </div>

    }

    @if (!String.IsNullOrEmpty(CurrentExercise))
    {
        <div class="col-lg-12 text-center">
            <h1>@CurrentExercise</h1>
        </div>

        <div class="col-lg-5"></div>

        <div class="col-lg-2">
            <input class="form-control text-center" id="currentAnswerInput" @bind="CurrentAnswer" @onkeyup="EnterPressed" />
        </div>

        <div class="col-lg-5"></div>

        <div class="col-lg-12 text-center">

            <button class="btn btn-primary" @onclick="CheckAnswer">Проверить</button>

        </div>

    }


</div>







@code {

    private int SelectedDifficulty = 1;
    private int QuizDifficulty;
    private int CorrectAnswers;
    private string CurrentExercise;
    private int? CurrentAnswer;
    List<string> WrongAnswers = new List<string>();
    List<int> Addends;

    private void GenerateAdditionExercise()
    {
        Random randomizer = new Random();
        int addend1;
        int addend2;
        SetDifficulty(SelectedDifficulty);
        addend1 = randomizer.Next(QuizDifficulty * 2);
        addend2 = randomizer.Next(QuizDifficulty * 2);
        Addends = new List<int> { addend1, addend2 };
        CurrentExercise = string.Format("{0}+{1}", Addends[0], Addends[1]);
    }

    private async void CheckAnswer()
    {
        if (CurrentAnswer == Addends.Sum())
        {
            CorrectAnswers++;
        }
        else
        {
            WrongAnswers.Add(CurrentExercise);
        }
        bool testvalue = false;
        CurrentAnswer = (testvalue == true) ? 1234 : (int?)null; //clear the int value
        GenerateAdditionExercise();
        await Focus("currentAnswerInput");
    }


    //for (int questionNumber = 0; questionNumber < 3; questionNumber++)
    //{
    //    addend1 = randomizer.Next(QuizDifficulty);
    //    addend2 = randomizer.Next(QuizDifficulty);
    //    List<int> numbers = new List<int> { addend1, addend2 };
    //    CurrentQuestion = string.Format("{0}x{1}=?", addend1, addend2);
    //    if (CurrentAnswer == numbers.Aggregate((x, y) => x * y))
    //        CorrectAnswers++;
    //    else
    //        WrongAnswers.Add(CurrentQuestion);
    //}

    private int SetDifficulty(int selectedDifficulty)
    {
        switch (selectedDifficulty)
        {
            case 1:
                QuizDifficulty = 11;
                break;

            case 2:
                QuizDifficulty = 51;
                break;

            case 3:
                QuizDifficulty = 101;
                break;

            case 4:
                QuizDifficulty = 1001;
                break;

            case 5:
                QuizDifficulty = 10001;
                break;

            default:
                QuizDifficulty = 51;
                break;
        }
        return QuizDifficulty;
    }

}

@code {
    private void EnterPressed(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            CheckAnswer();
        }
    }
}

@code {
    public async Task Focus(string elementId)
    {
        await js.InvokeVoidAsync("jsfunction.focusElement", elementId);
    }
}